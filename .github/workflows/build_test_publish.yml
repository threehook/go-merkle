# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build, test and publish

on:
  # Remove 'on push' if in operation
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages.
    # Once published, the packages are scoped to the account defined here.
    - name: Log in to the Container registry
      uses: docker/login-action@3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.CONTAINER_REGISTRY_PAT }}
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      uses: docker/build-push-action@5
      with:
        context: .
        push: true
        tags: |
          ${{ github.actor }}/go-merkle:${{ steps.meta.outputs.tags }}
          ${{ github.actor }}/go-merkle:latest
#        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
