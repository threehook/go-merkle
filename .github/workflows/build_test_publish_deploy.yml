# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build, test and publish

on:
  # Remove 'on push' if in operation
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

# Defines custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_test_publish:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    - name: Build
      run: go build -v ./...
    - name: Test
      run: go test -v ./...
    # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages.
    # Once published, the packages are scoped to the account defined here.
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.REGISTRY_TOKEN }}
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/go-merkle:latest
#          ${{ github.actor }}/go-merkle:${{ steps.meta.outputs.tags }}
#          ${{ github.actor }}/go-merkle:latest
#        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  chart_publish_deploy:
    needs: [ build_test_publish ]
    runs-on: ubuntu-latest
    steps:
      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Install helm
        id: install_helm
        uses: azure/setup-helm@v3
        with:
#          version: '<version>' # default is latest (stable)
          token: ${{ secrets.REGISTRY_TOKEN }} # only needed if version is 'latest'
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Package helm chart
        run: helm package ./chart
      - name: Login to registry
        run:  helm registry login ${{ env.REGISTRY }}/${{ github.repository_owner }} --username ${{ github.repository_owner }} --password ${{ secrets.REGISTRY_TOKEN }}
      - name: Push chart to registry
        run: helm push ./go-merkle-0.1.0.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}

      - name: Set env HELM_KUBETOKEN
        run: HELM_KUBETOKEN=echo $(kubectl create token deliverybot-sa -n cicd)
      - name: Install kubectl
        id: install_kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2' # default is latest stable
      - name: 'Deploy to k8s'
        env:
          HELM_KUBETOKEN: $HELM_KUBETOKEN
        run: |
          helm upgrade --install --atomic --timeout 1m rest chart/ \
            --kube-context docker-desktop --namespace cicd --create-namespace \
            --set image.tag=0.1.0

##        uses: 'deliverybot/helm@v1'
#        uses: 'vimeda/helm@v1.7.0'
#        with:
#          release: 'go-merkle'
#          namespace: 'cicd'
#          chart: 'app'
##          token: '${{ github.token }}'
##          secrets: '${{ toJSON(secrets) }}'
#          version: '0.1.0'
##          token: '${{ secrets.REGISTRY_TOKEN }}'
##          values: |
##            name: foobar
#        env:
#          KUBECONFIG_FILE: '${{ secrets.KUBECONFIG_FILE }}'
